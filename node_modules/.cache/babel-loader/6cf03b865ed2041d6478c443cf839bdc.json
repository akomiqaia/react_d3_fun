{"ast":null,"code":"var _jsxFileName = \"/home/ako/Documents/git/react_d3_fun/src/components/circle.js\";\nimport React, { useRef, useEffect, useState } from 'react';\nimport * as d3 from 'd3';\n\nasync function drawBars() {\n  // 1. Access data\n  let dataset = await d3.csv(\"../utils/data.csv\");\n\n  const summaryAccessor = d => d.Summary;\n\n  const actualHoursAccessor = d => +d.HoursActual;\n\n  const developerHoursAccessor = d => +d.DeveloperHoursActual; // Only use the first estimate per task (with highest actual hours)\n\n\n  let usedTasks = {};\n  dataset = dataset.filter(d => {\n    const hours = actualHoursAccessor(d);\n\n    if (usedTasks[summaryAccessor(d)]) {\n      const hasHigherValue = hours > usedTasks[summaryAccessor(d)];\n      if (!hasHigherValue) return false;\n    }\n\n    usedTasks[summaryAccessor(d)] = hours;\n    return actualHoursAccessor(d) > 10;\n  });\n\n  const diffAccessor = d => +d.HoursEstimate - actualHoursAccessor(d);\n\n  dataset = dataset.filter(d => diffAccessor(d) >= -50 && diffAccessor(d) <= 50);\n\n  const yAccessor = d => d.length; // 2. Create chart dimensions\n\n\n  const width = 600;\n  let dimensions = {\n    width: width,\n    height: width * 0.5,\n    margin: {\n      top: 35,\n      right: 10,\n      bottom: 50,\n      left: 50\n    }\n  };\n  dimensions.boundedWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right;\n  dimensions.boundedHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom; // 3. Draw canvas\n\n  const wrapper = d3.select(\"#wrapper\").append(\"svg\").attr(\"width\", dimensions.width).attr(\"height\", dimensions.height);\n  const bounds = wrapper.append(\"g\").style(\"transform\", `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`);\n  const background = bounds.append(\"g\"); // init static elements\n\n  bounds.append(\"g\").attr(\"class\", \"bins\");\n  bounds.append(\"line\").attr(\"class\", \"mean\");\n  bounds.append(\"g\").attr(\"class\", \"x-axis\").style(\"transform\", `translateY(${dimensions.boundedHeight}px)`).append(\"text\").attr(\"class\", \"x-axis-label\"); // 4. Create scales\n\n  const xScale = d3.scaleLinear().domain(d3.extent(dataset, diffAccessor)).range([0, dimensions.boundedWidth]).nice();\n  const binsGenerator = d3.histogram().domain(xScale.domain()).value(diffAccessor).thresholds(30);\n  const bins = binsGenerator(dataset);\n  const yScale = d3.scaleLinear().domain([0, d3.max(bins, yAccessor)]).range([dimensions.boundedHeight, 0]).nice(); // 5. Draw data\n\n  const barPadding = 1.5;\n  let binGroups = bounds.select(\".bins\").selectAll(\".bin\").data(bins);\n  binGroups.exit().remove();\n  const newBinGroups = binGroups.enter().append(\"g\").attr(\"class\", \"bin\");\n  newBinGroups.append(\"rect\"); // update binGroups to include new points\n\n  binGroups = newBinGroups.merge(binGroups);\n  const barRects = binGroups.select(\"rect\").attr(\"key\", (d, i) => i).attr(\"x\", d => xScale(d.x0) + barPadding).attr(\"y\", d => yScale(yAccessor(d))).attr(\"height\", d => dimensions.boundedHeight - yScale(yAccessor(d))).attr(\"width\", d => d3.max([0, xScale(d.x1) - xScale(d.x0) - barPadding]));\n  const mean = d3.mean(dataset, diffAccessor);\n  const meanLine = bounds.selectAll(\".mean\").attr(\"x1\", xScale(mean)).attr(\"x2\", xScale(mean)).attr(\"y1\", -20).attr(\"y2\", dimensions.boundedHeight);\n  const meanLabel = bounds.append(\"text\").attr(\"class\", \"mean-label\").attr(\"x\", xScale(mean)).attr(\"y\", -25).text(\"mean\"); // 6. Draw peripherals\n\n  const xAxisGenerator = d3.axisBottom().scale(xScale);\n  const xAxis = bounds.select(\".x-axis\").call(xAxisGenerator);\n  const xAxisLabel = xAxis.select(\".x-axis-label\").attr(\"x\", dimensions.boundedWidth / 2).attr(\"y\", dimensions.margin.bottom - 10).text(\"Hours over-estimated\");\n  const backgroundLeft = background.append(\"rect\").attr(\"class\", \"background left-side-background\").attr(\"y\", -20).attr(\"width\", dimensions.boundedWidth / 2).attr(\"height\", dimensions.boundedHeight + 20);\n  const backgroundRight = background.append(\"rect\").attr(\"class\", \"background right-side-background\").attr(\"x\", dimensions.boundedWidth / 2 + 1).attr(\"y\", -20).attr(\"width\", dimensions.boundedWidth / 2 - 1).attr(\"height\", dimensions.boundedHeight + 20);\n  const leftSideLabel = background.append(\"text\").attr(\"class\", \"label left-side-label\").attr(\"x\", 10).attr(\"y\", 0).text(\"Under-estimated\");\n  const rightSideLabel = background.append(\"text\").attr(\"class\", \"label right-side-label\").attr(\"x\", dimensions.boundedWidth - 10).attr(\"y\", 0).text(\"Over-estimated\"); // 7. Set up interactions\n\n  const barRectsListeners = bounds.selectAll(\".listeners\").data(bins).enter().append(\"rect\").attr(\"class\", \"listeners\").attr(\"x\", d => xScale(d.x0)).attr(\"y\", -dimensions.margin.top).attr(\"height\", dimensions.boundedHeight + dimensions.margin.top).attr(\"width\", d => d3.max([0, xScale(d.x1) - xScale(d.x0)])).on(\"mouseenter\", onMouseEnter).on(\"mouseleave\", onMouseLeave);\n  const tooltip = d3.select(\"#tooltip\");\n\n  function onMouseEnter(datum, index) {\n    tooltip.select(\"#range\").text([datum.x0 < 0 ? `Under-estimated by` : `Over-estimated by`, Math.abs(datum.x0), \"to\", Math.abs(datum.x1), \"hours\"].join(\" \"));\n    tooltip.select(\"#examples\").html(datum.slice(0, 3).map(summaryAccessor).join(\"<br />\"));\n    tooltip.select(\"#count\").text(Math.max(0, yAccessor(datum) - 2));\n    const percentDeveloperHoursValues = datum.map(d => developerHoursAccessor(d) / actualHoursAccessor(d) || 0);\n    const percentDeveloperHours = d3.mean(percentDeveloperHoursValues);\n\n    const formatHours = d => d3.format(\",.2f\")(Math.abs(d));\n\n    tooltip.select(\"#tooltip-bar-value\").text(formatHours(percentDeveloperHours));\n    tooltip.select(\"#tooltip-bar-item-1\").style(\"width\", `${percentDeveloperHours * 100}%`);\n    const x = xScale(datum.x0) + (xScale(datum.x1) - xScale(datum.x0)) / 2 + dimensions.margin.left;\n    const y = yScale(yAccessor(datum)) + dimensions.margin.top;\n    tooltip.style(\"transform\", `translate(` + `calc( -50% + ${x}px),` + `calc(-100% + ${y}px)` + `)`);\n    tooltip.style(\"opacity\", 1);\n    const hoveredBar = binGroups.select(`rect[key='${index}']`);\n    hoveredBar.classed(\"hovered\", true);\n  }\n\n  function onMouseLeave() {\n    tooltip.style(\"opacity\", 0);\n    barRects.classed(\"hovered\", false);\n  }\n}\n\nconst Circle = () => {\n  const ref = useRef();\n  useEffect(() => {\n    // runs d3 code when the Component mounths\n    const svgElement = d3.select(ref.current); // turn our ref into d3 object\n\n    drawBars();\n    svgElement.append(\"circle\") //append a circle\n    .attr(\"cx\", 150).attr(\"cy\", 70).attr(\"r\", 50);\n  }, []);\n  return /*#__PURE__*/React.createElement(\"svg\", {\n    ref: ref,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 12\n    }\n  });\n};\n\nexport default Circle;","map":{"version":3,"sources":["/home/ako/Documents/git/react_d3_fun/src/components/circle.js"],"names":["React","useRef","useEffect","useState","d3","drawBars","dataset","csv","summaryAccessor","d","Summary","actualHoursAccessor","HoursActual","developerHoursAccessor","DeveloperHoursActual","usedTasks","filter","hours","hasHigherValue","diffAccessor","HoursEstimate","yAccessor","length","width","dimensions","height","margin","top","right","bottom","left","boundedWidth","boundedHeight","wrapper","select","append","attr","bounds","style","background","xScale","scaleLinear","domain","extent","range","nice","binsGenerator","histogram","value","thresholds","bins","yScale","max","barPadding","binGroups","selectAll","data","exit","remove","newBinGroups","enter","merge","barRects","i","x0","x1","mean","meanLine","meanLabel","text","xAxisGenerator","axisBottom","scale","xAxis","call","xAxisLabel","backgroundLeft","backgroundRight","leftSideLabel","rightSideLabel","barRectsListeners","on","onMouseEnter","onMouseLeave","tooltip","datum","index","Math","abs","join","html","slice","map","percentDeveloperHoursValues","percentDeveloperHours","formatHours","format","x","y","hoveredBar","classed","Circle","ref","svgElement","current"],"mappings":"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","sourcesContent":["import React, {useRef, useEffect, useState} from 'react'\nimport * as d3 from 'd3'\nasync function drawBars() {\n    // 1. Access data\n      let dataset = await d3.csv(\"../utils/data.csv\")\n      const summaryAccessor = d => d.Summary\n      const actualHoursAccessor = d => +d.HoursActual\n      const developerHoursAccessor = d => +d.DeveloperHoursActual\n      // Only use the first estimate per task (with highest actual hours)\n      let usedTasks = {}\n      dataset = dataset.filter(d => {\n        const hours = actualHoursAccessor(d)\n        if (usedTasks[summaryAccessor(d)]) {\n          const hasHigherValue = hours > usedTasks[summaryAccessor(d)]\n          if (!hasHigherValue) return false\n        }\n        usedTasks[summaryAccessor(d)] = hours\n        return actualHoursAccessor(d) > 10\n      })\n      const diffAccessor = d => +d.HoursEstimate - actualHoursAccessor(d)\n      dataset = dataset.filter(d => (\n        diffAccessor(d) >= -50\n        && diffAccessor(d) <= 50\n      ))\n      const yAccessor = d => d.length\n    // 2. Create chart dimensions\n      const width = 600\n      let dimensions = {\n        width: width,\n        height: width * 0.5,\n        margin: {\n          top: 35,\n          right: 10,\n          bottom: 50,\n          left: 50,\n        },\n      }\n      dimensions.boundedWidth = dimensions.width - dimensions.margin.left - dimensions.margin.right\n      dimensions.boundedHeight = dimensions.height - dimensions.margin.top - dimensions.margin.bottom\n    // 3. Draw canvas\n      const wrapper = d3.select(\"#wrapper\")\n        .append(\"svg\")\n          .attr(\"width\", dimensions.width)\n          .attr(\"height\", dimensions.height)\n      const bounds = wrapper.append(\"g\")\n          .style(\"transform\", `translate(${dimensions.margin.left}px, ${dimensions.margin.top}px)`)\n      const background = bounds.append(\"g\")\n      // init static elements\n      bounds.append(\"g\")\n          .attr(\"class\", \"bins\")\n      bounds.append(\"line\")\n          .attr(\"class\", \"mean\")\n      bounds.append(\"g\")\n          .attr(\"class\", \"x-axis\")\n          .style(\"transform\", `translateY(${dimensions.boundedHeight}px)`)\n        .append(\"text\")\n          .attr(\"class\", \"x-axis-label\")\n    // 4. Create scales\n      const xScale = d3.scaleLinear()\n        .domain(d3.extent(dataset, diffAccessor))\n        .range([0, dimensions.boundedWidth])\n        .nice()\n      const binsGenerator = d3.histogram()\n        .domain(xScale.domain())\n        .value(diffAccessor)\n        .thresholds(30)\n      const bins = binsGenerator(dataset)\n      const yScale = d3.scaleLinear()\n        .domain([0, d3.max(bins, yAccessor)])\n        .range([dimensions.boundedHeight, 0])\n        .nice()\n    // 5. Draw data\n      const barPadding = 1.5\n      let binGroups = bounds.select(\".bins\")\n        .selectAll(\".bin\")\n        .data(bins)\n      binGroups.exit()\n          .remove()\n      const newBinGroups = binGroups.enter().append(\"g\")\n          .attr(\"class\", \"bin\")\n      newBinGroups.append(\"rect\")\n      // update binGroups to include new points\n      binGroups = newBinGroups.merge(binGroups)\n      const barRects = binGroups.select(\"rect\")\n          .attr(\"key\", (d, i) => i)\n          .attr(\"x\", d => xScale(d.x0) + barPadding)\n          .attr(\"y\", d => yScale(yAccessor(d)))\n          .attr(\"height\", d => dimensions.boundedHeight - yScale(yAccessor(d)))\n          .attr(\"width\", d => d3.max([\n            0,\n            xScale(d.x1) - xScale(d.x0) - barPadding\n          ]))\n      const mean = d3.mean(dataset, diffAccessor)\n      const meanLine = bounds.selectAll(\".mean\")\n          .attr(\"x1\", xScale(mean))\n          .attr(\"x2\", xScale(mean))\n          .attr(\"y1\", -20)\n          .attr(\"y2\", dimensions.boundedHeight)\n      const meanLabel = bounds.append(\"text\")\n          .attr(\"class\", \"mean-label\")\n          .attr(\"x\", xScale(mean))\n          .attr(\"y\", -25)\n          .text(\"mean\")\n    // 6. Draw peripherals\n      const xAxisGenerator = d3.axisBottom()\n        .scale(xScale)\n      const xAxis = bounds.select(\".x-axis\")\n        .call(xAxisGenerator)\n      const xAxisLabel = xAxis.select(\".x-axis-label\")\n          .attr(\"x\", dimensions.boundedWidth / 2)\n          .attr(\"y\", dimensions.margin.bottom - 10)\n          .text(\"Hours over-estimated\")\n      const backgroundLeft = background.append(\"rect\")\n          .attr(\"class\", \"background left-side-background\")\n          .attr(\"y\", -20)\n          .attr(\"width\", dimensions.boundedWidth / 2)\n          .attr(\"height\", dimensions.boundedHeight + 20)\n      const backgroundRight = background.append(\"rect\")\n          .attr(\"class\", \"background right-side-background\")\n          .attr(\"x\", dimensions.boundedWidth / 2 + 1)\n          .attr(\"y\", -20)\n          .attr(\"width\", dimensions.boundedWidth / 2 - 1)\n          .attr(\"height\", dimensions.boundedHeight + 20)\n      const leftSideLabel = background.append(\"text\")\n          .attr(\"class\", \"label left-side-label\")\n          .attr(\"x\", 10)\n          .attr(\"y\", 0)\n          .text(\"Under-estimated\")\n      const rightSideLabel = background.append(\"text\")\n          .attr(\"class\", \"label right-side-label\")\n          .attr(\"x\", dimensions.boundedWidth - 10)\n          .attr(\"y\", 0)\n          .text(\"Over-estimated\")\n    // 7. Set up interactions\n      const barRectsListeners = bounds.selectAll(\".listeners\")\n        .data(bins)\n        .enter().append(\"rect\")\n          .attr(\"class\", \"listeners\")\n          .attr(\"x\", d => xScale(d.x0))\n          .attr(\"y\", -dimensions.margin.top)\n          .attr(\"height\", dimensions.boundedHeight + dimensions.margin.top)\n          .attr(\"width\", d => d3.max([\n            0,\n            xScale(d.x1) - xScale(d.x0)\n          ]))\n          .on(\"mouseenter\", onMouseEnter)\n          .on(\"mouseleave\", onMouseLeave)\n      const tooltip = d3.select(\"#tooltip\")\n      function onMouseEnter(datum, index) {\n        tooltip.select(\"#range\")\n            .text([\n                datum.x0 < 0 ? `Under-estimated by` : `Over-estimated by`,\n              Math.abs(datum.x0),\n              \"to\",\n              Math.abs(datum.x1),\n              \"hours\",\n            ].join(\" \"))\n        tooltip.select(\"#examples\")\n            .html(\n              datum\n                .slice(0, 3)\n                .map(summaryAccessor)\n                .join(\"<br />\")\n              )\n        tooltip.select(\"#count\")\n          .text(Math.max(0, yAccessor(datum) - 2))\n        const percentDeveloperHoursValues = datum.map(d => (\n          (developerHoursAccessor(d) / actualHoursAccessor(d)) || 0\n        ))\n        const percentDeveloperHours = d3.mean(percentDeveloperHoursValues)\n        const formatHours = d => d3.format(\",.2f\")(Math.abs(d))\n        tooltip.select(\"#tooltip-bar-value\")\n          .text(formatHours(percentDeveloperHours))\n        tooltip.select(\"#tooltip-bar-item-1\")\n          .style(\"width\", `${percentDeveloperHours * 100}%`)\n        const x = xScale(datum.x0)\n          + (xScale(datum.x1) - xScale(datum.x0)) / 2\n          + dimensions.margin.left\n        const y = yScale(yAccessor(datum))\n          + dimensions.margin.top\n        tooltip.style(\"transform\", `translate(`\n          + `calc( -50% + ${x}px),`\n          + `calc(-100% + ${y}px)`\n          + `)`)\n        tooltip.style(\"opacity\", 1)\n        const hoveredBar = binGroups.select(`rect[key='${index}']`)\n        hoveredBar.classed(\"hovered\", true)\n      }\n      function onMouseLeave() {\n        tooltip.style(\"opacity\", 0)\n        barRects.classed(\"hovered\", false)\n      }\n    }\nconst Circle = () => {\n    const ref = useRef()\n    useEffect(() => { // runs d3 code when the Component mounths\n        const svgElement = d3.select(ref.current) // turn our ref into d3 object\n        drawBars()\n        svgElement.append(\"circle\") //append a circle\n            .attr(\"cx\", 150)\n            .attr(\"cy\", 70)\n            .attr(\"r\", 50)\n    }, [])\n    return (\n           <svg\n            ref={ref}\n           />\n\n    )\n}\n\nexport default Circle\n"]},"metadata":{},"sourceType":"module"}